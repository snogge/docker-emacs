#!/usr/bin/env ruby

require 'pty'
require 'yaml'
require 'find'
require 'ostruct'
require 'optparse'
require 'fileutils'

class Image < OpenStruct
  def self.load(file)
    YAML.load_file(file).map do |h|
      Image.new(h)
    end
  end

  def tag
    tags.first
  end

  def aliases
    tags[1..-1]
  end

  def version
    # Ensure version is a string
    super.to_s
  end

  def directory
    File.join(version, template)
  end

  def dockerfile
    File.join(directory, 'Dockerfile')
  end

  def tags
    # Ensure tags are strings
    super.map(&:to_s)
  end
end

def run!(*args)
  command = format(*args)
  puts '>>> running: %s' % command
  raise format('>>> error %d', $?.exitstatus) unless system(command)
end

def find_executable(command)
  return command if system(format('which %s >/dev/null 2>&1', command))
  return Find.find(File.dirname(__FILE__)).find{ |path| File.basename(path) == command }
end

class String
  def quotify
    format('"%s"', self)
  end

  def backquotify
    format('`%s`', self)
  end
end

def with_images(source, tags)
  images = Image.load(source)
  unless tags.empty?
    filtered = tags.map { |s| images.find{ |i| i.tags.include?(s) } }
    unknown = tags.select.with_index { |s, i| filtered[i].nil? }
    raise OptionParser::InvalidArgument.new(format('the following tag(s) do not exist: %s', unknown.join(', '))) unless unknown.empty?
    images = filtered.compact
  end
  return images unless block_given?
  images.each{ |i| yield i }
end

def prepare(options, tags)
  raise OptionParser::MissingArgument.new('git-repository not set.') if options[:git_repository].nil?
  raise OptionParser::MissingArgument.new('travis-cache not set.') if options[:travis_cache].nil?

  with_images(options[:source], tags) do |image|
    puts format('>>> syncing branch %s with repository %s', image.branch, options[:git_repository])
    directory = format('%s/%s', options[:travis_cache], image.branch)
    run!('%s "%s" "%s" "%s"', find_executable('git-sync'), options[:git_repository], image.branch, directory)

    # Copy updated sources to docker build context, and then remove
    # the .git directory so it doesn't affect cache calculations
    puts format('>>> copying source to %s', image.directory)
    source_directory = File.join(image.directory, 'source')
    FileUtils.rm_rf(source_directory)
    FileUtils.cp_r(directory, source_directory, preserve: true)
    FileUtils.rm_rf(File.join(source_directory, '.git'))
  end
end

def build(options, tags)
  raise OptionParser::MissingArgument.new('docker-repository not set.') if options[:docker_repository].nil?

  with_images(options[:source], tags) do |image|
    # Pull previous image in order to use it as cache in the build
    docker_image = format('%s:%s', options[:docker_repository], image.tag)
    puts format('>>> pulling %s', docker_image)
    run!('docker pull "%s"', docker_image) rescue nil

    # Build the new image
    Dir.chdir(image.directory) do
      puts format('>>> building %s from source %s (target: %s)', docker_image, image.branch, image.target)
      caches = `docker images -q`.split.map{ |s| format('--cache-from %s', s) }.join(' ')
      run!('docker build --pull --tag "%s" --target="%s" %s .', docker_image, image.target.to_s, caches)
    end

    # Assign the rest of the tags
    tags = image.aliases.map{ |tag| format('%s:%s', options[:docker_repository], tag) }
    tags.each do |img|
      puts format('>>> tagging %s', img)
      run!('docker tag "%s" "%s"', docker_image, img)
    end
  end
end

def push(options, tags)
  raise OptionParser::MissingArgument.new('docker-repository not set.') if options[:docker_repository].nil?
  raise OptionParser::MissingArgument.new('docker-username not set.') if options[:docker_username].nil?
  raise OptionParser::MissingArgument.new('docker-password not set.') if options[:docker_password].nil?

  with_images(options[:source], tags) do |image|
    run!('docker login --username="%s" --password="%s"', options[:docker_username], options[:docker_password])
    image.tags.each do |tag|
      img = format('%s:%s', options[:docker_repository], tag)
      puts format('>>> pushing %s', img)
      run!('docker push "%s"', img)
    end
  end
end

def test(options, tags)
  raise OptionParser::MissingArgument.new('docker-repository not set.') if options[:docker_repository].nil?

  with_images(options[:source], tags) do |image|
    run!('docker run --rm "%s:%s" emacs --version', options[:docker_repository], image.tag)
  end
end

def generate(options, tags)
  images = with_images(options[:source], tags)
  generate_dockerfiles(images)
  generate_readme(images)
  generate_travis(images)
end

def generate_dockerfiles(images)
  puts '>>> generating dockerfiles'
  images.each do |image|
    directory = image.directory
    FileUtils.rm_rf(image.directory)
    FileUtils.mkdir_p(image.directory)
    content = File.read(format('templates/%s/Dockerfile', image.template))
    content.gsub!('{{BRANCH}}', image.branch.to_s)
    content.gsub!('{{VERSION}}', image.version.to_s)
    content.gsub!('{{CONFIGURE}}', image.configure ? format(' %s', image.configure) : '')
    File.write(image.dockerfile, content)

    if image.patches
      patches_directory = format('%s/patches', image.directory)
      FileUtils.mkdir_p(patches_directory)
      patches_files = Dir[format('templates/%s/*', image.patches)]
      FileUtils.cp(patches_files, patches_directory)
    end
  end
end

def generate_readme(images)
  puts '>>> generating README.md'
  tags = images.map do |image|
    format('- %s [(%s)](https://github.com/snogge/docker-emacs/blob/master/%s)',
           image.tags.map(&:backquotify).join(', '),
           image.dockerfile,
           image.dockerfile)
  end.flatten
  content = File.read('templates/README.md')
  content.gsub!('{{TAGS}}', tags.join("\n"))
  File.write('README.md', content)
end

def generate_travis(images)
  puts '>>> generating .travis.yml'
  envs = images.group_by{ |i| [i.branch, i.template] }.map(&:last).map do |arr|
    arr.sort_by!{ |i| i.target.nil? ? 1 : 0 }
    format('  - DOCKER_IMAGES="%s"', arr.map(&:tag).join(' '))
  end
  content = File.read('templates/.travis.yml')
  content.gsub!('{{ENV}}', envs.join("\n"))
  File.write('.travis.yml', content)
end

options =
{
  source:            File.join(File.dirname(__FILE__), '..', 'images.yml'),
  travis_cache:      ENV['TRAVIS_CACHE'],
  git_repository:    ENV['GIT_REPOSITORY'],
  docker_repository: ENV['DOCKER_REPOSITORY'],
  docker_username:   ENV['DOCKER_USERNAME'],
  docker_password:   ENV['DOCKER_PASSWORD']
}

global = OptionParser.new do |opts|
  opts.banner = 'Usage: images COMMAND'
  opts.separator ''
  opts.separator <<~COMMANDS
  Commands:
          prepare:  prepare the images to be built (git sync).
          build:    build the images.
          push:     push the images.
          test:     test the images.
          generate: generate the Dockerfiles, README and travis files.
  COMMANDS
  opts.separator ''
  opts.separator 'Options:'
  opts.on('--source FILE', 'Sets the images source (default images.yml)') do |source|
    options[:source] = source
  end
end

commands = {
  'prepare' => OptionParser.new do |opts|
    opts.banner = 'Usage: images prepare [OPTIONS] IMAGE1 [IMAGE2...]'
    opts.separator ''
    opts.separator 'Prepare the images (sync with git, copy to images directory, remove .git directory).'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('--git-repository=REPOSITORY', 'Sets the git repository (default $GIT_REPOSITORY).') do |repository|
      options[:git_repository] = repository
    end
    opts.on('--travis-cache=CACHE', 'Sets the travis cache (default $TRAVIS_CACHE).') do |cache|
      options[:travis_cache] = cache
    end
  end,
  'build' => OptionParser.new do |opts|
    opts.banner = 'Usage: images build IMAGE [IMAGE...]'
    opts.separator ''
    opts.separator 'Build the images.'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('--docker-repository=REPOSITORY', 'Sets the docker repository (default $DOCKER_REPOSITORY).') do |repository|
      options[:docker_repository] = repository
    end
  end,
  'push' => OptionParser.new do |opts|
    opts.banner = 'Usage: images push IMAGE [IMAGE...]'
    opts.separator ''
    opts.separator 'Push the images.'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('--docker-repository=REPO', 'Sets the docker repository (default $DOCKER_REPOSITORY).') do |repository|
      options[:docker_repository] = repository
    end
    opts.on('--docker-username=USERNAME', 'Sets the docker username (default $DOCKER_USERNAME).') do |username|
      options[:docker_username] = username
    end
    opts.on('--docker-password=PASSWORD', 'Sets the docker password (default $DOCKER_PASSWORD).') do |password|
      options[:docker_password] = password
    end
  end,
  'test' => OptionParser.new do |opts|
    opts.banner = 'Usage: images test IMAGE [IMAGE...]'
    opts.separator ''
    opts.separator 'Test the images.'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('--docker-repository=REPOSITORY', 'Sets the docker repository (default $DOCKER_REPOSITORY).') do |repository|
      options[:docker_repository] = repository
    end
  end,
  'generate' => OptionParser.new do |opts|
    opts.banner = 'Usage: images generate IMAGE [IMAGE...]'
    opts.separator ''
    opts.separator 'Generate the Dockerfiles, README and travis files.'
  end
}

Dir.chdir(File.join(File.dirname(__FILE__), '..')) do
  begin
    scope = global
    global.order!
    command = ARGV.shift
    raise OptionParser::MissingArgument.new('"images" requires a command.') if command.nil?
    raise OptionParser::InvalidArgument.new(format('"%s" is not a valid command.', command)) unless commands.has_key?(command)
    scope = commands[command]
    scope.order!
    send(command, options, ARGV)
  rescue OptionParser::ParseError => e
    $stderr.puts e.message
    $stderr.puts
    $stderr.puts scope.help
    exit(1)
  rescue => e
    $stderr.puts(e.message)
    exit(1)
  end
end
